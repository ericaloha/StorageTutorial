This is a brief summary for this week's meeting (2021/08/18).

1. An introduction for the data movement project:

(1) Issues.
    data movement overhead is non-trivial:
      a.the data that are just prefetched by a specific component (like cache) will be immediately evicted and dilivered to underlying components, which causes invalid data movement
      b.the component that just invokes I/O heavy operation (e.g., GC and degragmentation) will be immediately feed by massive concurrent requests (also I/O heavy), the two worst cases meets without handling.
      
 (2) Basic idea:
      for a. : by considering the global system status, a global brain (controller) can be constructed to collecting ststem status, then issue data to corresponding detination and schedule the backend I/O opeartion.
      foe b. : associated with the global controller, the workload predicter can be adopted for predicting the following workload so that the global controller delay/bring forward backend operations to avoid conflict with frontend requests.
      
 (3) In/Out
      Input: workload patterns (predicted) + componnets status
      Output: request I/O destination; system I/O operation (global time + invoking); inner data movement (upload/download/prefetch); operation delay/bring forward commands.
      
2. Storage/ML paper survey (details attched at slides)

3. Workload project:

  (1) NAS / SAN with raw block traces and controlling information (metadata, command log)
  
  (2) traces are pending, maybe available after 10/2121
  
  (3) issues:
      the workload is ''dirty'' since there may be requests, that follow different patterns, appearing together with a mixed manner, which means the time/space relationship for the storage space address should be figured out. (e.g. the requests issued by an app should be collected and represented as a pattern)
  
  (4) working scenarios:
      a. suppose there are no new distributions and the completed workload patterns base is availiable, the issue is to classify incoming workloads with corresponding classes;
      b. new distributions appear and it remains unknown in terms of the pattern, access frequency and etc, the issue is to cluster or give a defination (pattern) to the new workload;
  
 4. Works for next week
 
  (1) present the HotStorage'21 ML4Storage paper;
  (2) present storage paper with a more clearer way;
  (3) continue the ML tutorial.  
  
  
 **. Presentation format
 
  (1) Problems: (to slove which kinds of problems, under which scenarios, why it works like significance)
  (2) Differences (contributions): (previous way to solve the issue, now which way to solve the issue)
  (3) Validation: (how to evaluate the effciency, experimental setup (platform), benchmark (trace), results for target optimazation)
  (4) Conclusion: (how to adopt/migrate the proposed method, the involvement with our work, how this work can help us)
  
 *. Meeting routine template
 
  (1) weekly review for current works (3-5 mins);
  (2) paper reading (2-3) (20-30 mins);
  (3) deep discussion with specific issues (30 mins).
